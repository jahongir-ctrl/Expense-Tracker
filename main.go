package main

import (
	"context"
	//"fmt"
	//"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	_ "ExpenceTracker/docs"
	"ExpenceTracker/internal/config"
	"ExpenceTracker/internal/controller"
	"ExpenceTracker/internal/db"
	"ExpenceTracker/logger"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title Expense Tracker API
// @version 1.0
// @description API Server for Expense Tracker Application
// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
// @host localhost:8181
// @BasePath /

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏ –ª–æ–≥–≥–µ—Ä–∞
	config.LoadConfig()
	logger.InitLogger()

	// .env
	if err := godotenv.Load(); err != nil {
		logger.Log.Warn("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª")
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
	if err := db.ConnectDB(); err != nil {
		logger.Log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ", err)
	}
	defer db.CloseDB()

	// –ú–∏–≥—Ä–∞—Ü–∏–∏
	if err := db.InitMigrations(); err != nil {
		logger.Log.Fatal("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ", err)
	}

	// –†–æ—É—Ç–∏–Ω–≥
	router := gin.Default()
	controller.RegisterRoutes(router)
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// HTTP-—Å–µ—Ä–≤–µ—Ä
	srv := &http.Server{
		Addr:    ":8181",
		Handler: router,
	}

	logger.Log.Info("‚úÖ –ò–Ω—Ñ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ")
	logger.Log.Warn("‚ö†Ô∏è –≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
	logger.Log.Error("‚ùå –û—à–∏–±–∫–∞ –∫–∞–∫–∞—è-—Ç–æ")
	logger.Log.Debug("üõ† –≠—Ç–æ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

	// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
	go func() {
		logger.Log.Info("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8181")
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logger.Log.Fatal("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ", err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	logger.Log.Info("‚è≥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		logger.Log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞: ", err)
	}

	logger.Log.Info("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

}
